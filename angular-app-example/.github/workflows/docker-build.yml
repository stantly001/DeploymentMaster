name: Docker Build CI/CD

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: angular-app

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./angular-app-example
          file: ./angular-app-example/multi-stage.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
  deploy-to-staging:
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    environment:
      name: staging
      url: https://staging.example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: angular-cluster
          location: us-central1-a
          
      - name: Deploy to GKE
        run: |
          # Replace with your GKE deployment script
          cd angular-app-example
          
          # Configure kubectl
          echo "Deploying to staging environment..."
          
          # Set the image tag to the latest build
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Run GKE deployment script
          ./gke_deploy.sh \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --cluster=angular-cluster \
            --domain=staging.example.com \
            --tag=$IMAGE_TAG
            
      - name: Check deployment status
        run: |
          kubectl rollout status deployment/angular-app -n default
          
  deploy-to-production:
    needs: deploy-to-staging
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: https://example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure Google Cloud credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: angular-cluster
          location: us-central1-a
          
      - name: Deploy to GKE
        run: |
          # Extract version from tag (e.g., 'v1.2.3' -> '1.2.3')
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Configure kubectl
          echo "Deploying version $VERSION to production environment..."
          
          # Run GKE deployment script
          ./gke_deploy.sh \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --cluster=angular-cluster \
            --domain=example.com \
            --tag=$VERSION
            
      - name: Check deployment status
        run: |
          kubectl rollout status deployment/angular-app -n default
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true