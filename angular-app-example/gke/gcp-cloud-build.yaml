# Google Cloud Build configuration for Angular application

timeout: 1800s
steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['ci']
    dir: 'angular-app-example'

  # Run tests
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'test', '--', '--no-watch', '--browsers=ChromeHeadless']
    dir: 'angular-app-example'

  # Build production application
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build', '--', '--configuration=production']
    dir: 'angular-app-example'

  # Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/angular-app:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/angular-app:latest',
      '-f', 'Dockerfile',
      '.'
    ]
    dir: 'angular-app-example'

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/angular-app:$COMMIT_SHA']

  # Push the latest tag
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/angular-app:latest']

  # Deploy to GKE using Helm
  - name: 'gcr.io/$PROJECT_ID/helm'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Configure kubectl and authenticate to the cluster
        gcloud container clusters get-credentials $(CLUSTER_NAME) --zone $(CLUSTER_ZONE) --project $PROJECT_ID
        
        # Check if Helm release exists
        if helm status angular-app -n default > /dev/null 2>&1; then
          # Upgrade the existing release
          helm upgrade angular-app ./helm-chart \
            -n default \
            --set container.image.repository=gcr.io/$PROJECT_ID/angular-app \
            --set container.image.tag=$COMMIT_SHA \
            --set ingress.hosts[0].host=$(DOMAIN_NAME)
        else
          # Install a new release
          helm install angular-app ./helm-chart \
            -n default \
            --set container.image.repository=gcr.io/$PROJECT_ID/angular-app \
            --set container.image.tag=$COMMIT_SHA \
            --set ingress.hosts[0].host=$(DOMAIN_NAME)
        fi
    dir: 'angular-app-example'
    env:
      - 'CLUSTER_NAME=angular-cluster'
      - 'CLUSTER_ZONE=us-central1-a'
      - 'DOMAIN_NAME=example.com'

images:
  - 'gcr.io/$PROJECT_ID/angular-app:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/angular-app:latest'

substitutions:
  _CLUSTER_NAME: 'angular-cluster'
  _CLUSTER_ZONE: 'us-central1-a'
  _DOMAIN_NAME: 'example.com'

options:
  substitution_option: 'ALLOW_LOOSE'