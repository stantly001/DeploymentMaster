apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    version: {{ .Values.application.version | quote }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.application.version | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    {{- if .Values.monitoring.enabled }}
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"
    {{- end }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      version: {{ .Values.istio.trafficManagement.stableVersion | default "v1" }}
  strategy:
    {{- toYaml .Values.deployment.updateStrategy | nindent 4 }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        version: {{ .Values.istio.trafficManagement.stableVersion | default "v1" }}
      annotations:
        {{- if .Values.istio.enabled }}
        sidecar.istio.io/inject: "true"
        {{- end }}
    spec:
      {{- if .Values.gke.enabled }}
      nodeSelector:
        {{- toYaml .Values.gke.nodeSelectors | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.deployment.securityContext | nindent 8 }}
      containers:
        - name: {{ .Release.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          {{- if .Values.deployment.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.deployment.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.deployment.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.deployment.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessProbe.path }}
              port: http
            initialDelaySeconds: {{ .Values.deployment.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.deployment.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.deployment.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.deployment.readinessProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.container.resources | nindent 12 }}
          env:
            {{- range .Values.env.normal }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- range .Values.env.secrets }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .secretName }}
                  key: {{ .secretKey }}
            {{- end }}
          volumeMounts:
            {{- if .Values.container.nginx.enabled }}
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
            {{- end }}
            {{- if .Values.configMaps.enabled }}
            - name: config-volume
              mountPath: /usr/share/nginx/html/assets/config
            {{- end }}
      volumes:
        {{- if .Values.container.nginx.enabled }}
        - name: nginx-config
          configMap:
            name: {{ .Release.Name }}-nginx-config
        {{- end }}
        {{- if .Values.configMaps.enabled }}
        - name: config-volume
          configMap:
            name: {{ .Release.Name }}-config
        {{- end }}